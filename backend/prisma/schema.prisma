generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status_Vaccine_Applications {
  APPLIED
  PENDING
  OVERDUE // A vacina deveria ter sido aplicada, mas a data já passou.
}

enum Roles {
  ADMIN
  FARMER
  FARMHAND
  VETERINARY
}

enum Health_Status {
  HEALTHY
  SICK
  INJURED
  RECOVERING
}

model Farms {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(200)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relações
  user   Users[]
  animal Animals[]
}

model Users {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(200)
  email         String   @unique @db.VarChar(255)
  password      String   @db.VarChar(255)
  profile_photo String?  @db.VarChar(300) // Armazena caminho da imagem ou URL externa
  role          Roles
  farm_id       Int
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relações: 
  farmhand   Farmhands?
  veterinary Veterinarians?
  farm       Farms          @relation(fields: [farm_id], references: [id], onDelete: Cascade)

  @@index([farm_id])
}

model Farmhands {
  id      Int @id @default(autoincrement())
  user_id Int @unique

  // Relações
  user Users @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Veterinarians {
  id      Int @id @default(autoincrement())
  user_id Int @unique

  // Relações
  user        Users          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  application Applications[]
}

model Animals {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(200)
  species_id    Int
  breed_id      Int
  birth_date    DateTime
  weight        Float // em KG
  health_status Health_Status
  farm_id       Int
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt

  // Relações
  species Species @relation(fields: [species_id], references: [id], onDelete: Cascade)
  breed   Breeds  @relation(fields: [breed_id], references: [id], onDelete: Cascade)
  farm    Farms   @relation(fields: [farm_id], references: [id], onDelete: Cascade)

  location    Locations[]
  application Applications[]

  @@index([species_id])
  @@index([breed_id])
  @@index([farm_id])
}

model Species {
  id               Int      @id @default(autoincrement())
  name             String   @db.VarChar(200)
  description      String   @db.Text
  average_lifespan Int? // em anos 
  gestation_period Int? // em dias 
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  // Relações 
  animal Animals[]
  breed  Breeds[]
}

model Breeds {
  id             Int      @id @default(autoincrement())
  name           String   @db.VarChar(200)
  description    String   @db.Text
  species_id     Int
  average_weight Float? // em KG
  productivity   String? // (ex. leiteira, corte, tração)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relações 
  species Species   @relation(fields: [species_id], references: [id], onDelete: Cascade)
  animal  Animals[]

  @@index([species_id])
}

model Vaccines {
  id                 Int      @id @default(autoincrement())
  name               String   @db.VarChar(200)
  target_disease     String   @db.VarChar(200)
  manufacturer_id    Int
  batch              String   @db.VarChar(200)
  expiration_date    DateTime
  required_doses     Int
  dosing_interval    Int?     @default(0) // Em dias
  type_of_vaccine_id Int
  notes              String   @db.VarChar(200)
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  // Relações
  manufacturer    Manufacturers     @relation(fields: [manufacturer_id], references: [id], onDelete: Cascade)
  type_of_vaccine Types_of_Vaccines @relation(fields: [type_of_vaccine_id], references: [id], onDelete: Cascade)
  applications    Applications[]

  @@index([manufacturer_id])
  @@index([type_of_vaccine_id])
}

model Manufacturers {
  id             Int      @id @default(autoincrement())
  name           String   @db.VarChar(200)
  cnpj           String   @unique @db.VarChar(200)
  email          String   @unique @db.VarChar(250)
  phone          String   @db.VarChar(15)
  address        String   @db.VarChar(200)
  country        String   @db.VarChar(200)
  license_number String   @db.VarChar(200)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relações 
  vaccines Vaccines[]
}

model Types_of_Vaccines {
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(200)
  description String @db.Text

  // Relaçoes 
  vaccines Vaccines[]
}

model Applications {
  id                         Int                         @id @default(autoincrement())
  animal_id                  Int
  vaccine_id                 Int
  veterinary_id              Int
  application_date           DateTime
  next_application_date      DateTime?
  status_vaccine_application Status_Vaccine_Applications
  created_at                 DateTime                    @default(now())
  updated_at                 DateTime                    @updatedAt

  // Relações
  animal     Animals       @relation(fields: [animal_id], references: [id], onDelete: Cascade)
  vaccine    Vaccines      @relation(fields: [vaccine_id], references: [id], onDelete: Cascade)
  veterinary Veterinarians @relation(fields: [veterinary_id], references: [id], onDelete: Cascade)

  @@index([animal_id])
  @@index([vaccine_id])
  @@index([veterinary_id])
  @@index([application_date])
}

model Locations {
  id          Int      @id @default(autoincrement())
  animal_id   Int
  latitude    Float
  longitude   Float
  captured_at DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relações 
  animal Animals @relation(fields: [animal_id], references: [id], onDelete: Cascade)

  @@index([animal_id])
  @@index([captured_at])
}
